/*
* Copyright 2016 Luca Martino.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copyFile of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/



apply plugin: 'com.android.application'

ext {
    supportLibraryVersion = '1.0.0'
    grpcVersion = '1.11.0'
}

android {
    namespace 'nie.translator.MLTranslator'
    compileSdkVersion 33  //33
    defaultConfig {
        applicationId "nie.translator.MLTranslator"
        targetSdkVersion 32   //32
        versionCode 19
        versionName '2.0.4'
        minSdkVersion 24
        externalNativeBuild {
            cmake {
                cppFlags ''
                abiFilters 'arm64-v8a', 'armeabi-v7a','x86'
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
            debuggable true
        }
        release {
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled false

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources false

            // Includes the default ProGuard rules files that are packaged with
            // the Android Gradle plugin. To learn more, go to the section about
            // R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    }
    productFlavors {
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.22.1'
        }
    }
}

dependencies {
    //implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.github.okitcom:SwitchButton:1.4.5'
    // Support libraries
    implementation "com.google.android.material:material:1.9.0"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.recyclerview:recyclerview:1.0.0"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.preference:preference:1.1.0-alpha02"  //prima era 1.1.0 alpha 2
    implementation "androidx.core:core-splashscreen:1.0.1"
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    //implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.work:work-runtime:2.7.1'
    //bluetooth communicator
    //implementation 'com.github.queenieeq:BluetoothCommunicator:1.0.6'
    //gallery image selector
    implementation 'com.github.queenieeq:GalleryImageSelector:1.0.7'
    //ONNX Runtime
    implementation 'com.microsoft.onnxruntime:onnxruntime-android:1.18.0'  //latest.release
    implementation 'com.microsoft.onnxruntime:onnxruntime-extensions-android:0.11.0'   //latest.release
    //Ml-Kit
    implementation 'com.google.mlkit:language-id:17.0.5'
    //JWS parser
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '5.1'
    //Room library (database)
    def room_version = '2.1.0'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // use kapt for Kotlin
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}